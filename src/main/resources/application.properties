server.port=8283
server.servlet.context-path=/crm
spring.profiles.include=local

# URL
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=${jdbc.url}
# 用户名
spring.datasource.username=${jdbc.username}
# 密码
spring.datasource.password=${jdbc.password}
# 初始连接数
spring.datasource.druid.initial-size=1
# 最小连接池数量
spring.datasource.druid.min-idle=1
# 最大连接池数量
spring.datasource.druid.max-active=200
# 获取连接时最大等待时间, 单位毫秒
spring.datasource.druid.max-wait=60000
# 配置间隔多久才进行一次检测, 检测需要关闭的空闲连接, 单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间, 单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 用来检测连接是否有效的SQL, 要求是一个查询语句, 常用select 'x'. 如果validationQuery为null, testOnBorrow, testOnReturn, testWhileIdle都不会起作用.
spring.datasource.druid.validation-query=SELECT 1
# 建议配置为true, 不影响性能, 并且保证安全性. 申请连接的时候检测, 如果空闲时间大于timeBetweenEvictionRunsMillis, 执行validationQuery检测连接是否有效.
spring.datasource.druid.test-while-idle=true
# 申请连接时执行validationQuery检测连接是否有效, 做了这个配置会降低性能.
spring.datasource.druid.test-on-borrow=false
# 归还连接时执行validationQuery检测连接是否有效, 做了这个配置会降低性能.
spring.datasource.druid.test-on-return=false
# 是否缓存preparedStatement, 也就是PSCache. PSCache对支持游标的数据库性能提升巨大, 比如说Oracle. 在MySQL下建议关闭.
spring.datasource.druid.pool-prepared-statements=false
# 配置扩展插件, 监控统计用的filter:stat
spring.datasource.druid.filters=stat,wall,slf4j
#字节码调整 UTF8MB64
spring.datasource.druid.connection-init-sqls=set names utf8mb4
